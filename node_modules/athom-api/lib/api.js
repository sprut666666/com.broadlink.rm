"use strict";

var util 			= require('util');
var extend 			= require('util')._extend;
var events			= require('events');

var request 		= require('request');
var oauth2 			= require('simple-oauth2');

var config			= require('../config.json');

function Api( opts, token ) {

	this.opts = extend({
		client_id		: undefined,
		client_secret	: undefined,
		callback_url	: 'http://localhost/callback',
		debug			: false
	}, opts)

	this.oauth2 = oauth2({
		clientID			: this.opts.client_id,
		clientSecret		: this.opts.client_secret,
		site				: config.api_url,
		tokenPath			: config.token_path,
		authorizationPath	: config.authorise_path
	});

	if( token ) {
		this._token = this.oauth2.accessToken.create(token);
	} else {
		this._token = undefined;
	}

}

var EventEmitter = events.EventEmitter;
util.inherits( Api, EventEmitter );

Api.prototype.debug = function(){
	if( this.opts.debug ) {
		console.log.apply(null, arguments);
	}
}

Api.prototype.getAuthorizationUrl = function( state ){
	return this.oauth2.authCode.authorizeURL({
		redirect_uri: this.opts.callback_url,
		state: state
	});
}

Api.prototype.getAuthorizationToken = function( code, callback ) {
	callback = callback || function(){}

	this.debug('getAuthorizationToken');

	this.oauth2.authCode.getToken({
		code: code
	}, function( err, result ){
		if( err ) return callback(err);

		this._token = this.oauth2.accessToken.create( result );
		callback( null, result );
	}.bind(this));
}

Api.prototype.getClientToken = function( callback ) {
	callback = callback || function(){}

	this.debug('getClientToken');

	this.oauth2.client.getToken({}, function( err, result ){
		if( err ) return callback(err);

		this._token = this.oauth2.accessToken.create( result );
		callback( null, result );
	}.bind(this));
}

Api.prototype.getPasswordToken = function( username, password, callback ) {
	callback = callback || function(){}

	this.debug('getPasswordToken');

	this.oauth2.password.getToken({
		username: username,
		password: password
	}, function( err, result ){
		if( err ) return callback(err);

		this._token = this.oauth2.accessToken.create( result );
		callback( null, result );
	}.bind(this));

}

Api.prototype.revokeToken = function( type, callback ){
	callback = callback || function(){}

	this.debug('revokeToken');

	if( this.opts.token && typeof opts.token.expired == 'function' ) {
		this.debug('revoking token');
		this.opts.token.revoke( type, callback );
	} else {
		return callback( new Error("invalid_token") );
	}
}

Api.prototype.refreshToken = function( token, callback ) {
	token = token || this._token;
	callback = callback || function(){}

	this.debug('refreshToken');

	token.refresh(function(err, result) {
		if( err ) return callback(err);
		this._token = result;
		this.emit('refresh', this._token.token);
		return callback( null, this._token );
	}.bind(this));
}

Api.prototype._call = function( opts, callback ){
	callback = callback || function(){}

	opts = extend({
		method	: 'GET',
		path	: '/',
		body	: true,
		timeout	: 20000,
		token	: this._token
	}, opts)

	// refresh token if expired
	if( opts.token && typeof opts.token.expired == 'function' ) {
		if( opts.token.expired() ) {
			return this.refreshToken( opts.token, function( err, token ){
				if( err ) return callback(err);
				opts.token = token;
				return this._call( opts, callback );
			}.bind(this))
		}
	} else {
		return callback( new Error("invalid_token") );
	}

	var requestOpts = {
		method	: opts.method,
		json	: opts.body,
		url		: config.api_url + opts.path,
		timeout	: opts.timeout,
		auth	: {
			bearer: opts.token.token.access_token
		}
	};

	return request(requestOpts, function( err, result, body ){
		if( err ) return callback( err );

		// refresh token if expired
		if( result.statusCode == 401 ) {
			this.debug('got 401, refreshing...')
			return this.refreshToken( opts.token, function(err, token){
				if( err ) return callback(err);
				opts.token = token;
				return this._call( opts, callback );
			}.bind(this));
		}

		return callback( null, body, result.statusCode );
	}.bind(this))

}

Api.prototype.get = function( path, callback ){
	return this._call({
		method	: 'GET',
		path	: path
	}, callback );
}

Api.prototype.post = function( path, body, callback ){
	return this._call({
		method	: 'POST',
		body	: body || {},
		path	: path
	}, callback );
}

Api.prototype.put = function( path, body, callback ){
	return this._call({
		method	: 'PUT',
		body	: body || {},
		path	: path
	}, callback );
}

Api.prototype.delete = function( path, callback ){
	return this._call({
		method	: 'DELETE',
		path	: path
	}, callback );
}

module.exports = Api;
